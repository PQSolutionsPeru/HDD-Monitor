--- Contenido de web_plugin_registrant.dart ---

// Flutter web plugin registrant file.
//
// Generated file. Do not edit.
//

// @dart = 2.13
// ignore_for_file: type=lint

import 'package:cloud_firestore_web/cloud_firestore_web.dart';
import 'package:firebase_auth_web/firebase_auth_web.dart';
import 'package:firebase_core_web/firebase_core_web.dart';
import 'package:flutter_web_plugins/flutter_web_plugins.dart';

void registerPlugins([final Registrar? pluginRegistrar]) {
  final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;
  FirebaseFirestoreWeb.registerWith(registrar);
  FirebaseAuthWeb.registerWith(registrar);
  FirebaseCoreWeb.registerWith(registrar);
  registrar.registerMessageHandler();
}



--- Contenido de main.dart ---

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flut_hdd_monitor/services/firebase_options.dart';
import 'package:flut_hdd_monitor/services/auth_guard.dart';
import 'package:provider/provider.dart';
import 'package:flut_hdd_monitor/services/bluetooth_provider.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:workmanager/workmanager.dart';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notificationsPlugin = FlutterLocalNotificationsPlugin();

  static Future<void> initialize() async {
    const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');
    final InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
    );

    await _notificationsPlugin.initialize(initializationSettings);
  }

  static Future<void> showNotification(int id, String title, String body, String payload) async {
    const NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        'high_importance_channel',
        'High Importance Notifications',
        channelDescription: 'This channel is used for important notifications.',
        importance: Importance.high,
        priority: Priority.high,
        playSound: true,
        enableLights: true,
        visibility: NotificationVisibility.public,
        fullScreenIntent: true
      )
    );

    await _notificationsPlugin.show(id, title, body, notificationDetails, payload: payload);
  }
}

void callbackDispatcher() {
  Workmanager().executeTask((task, inputData) {
    NotificationService.showNotification(
      inputData!['id'] as int,
      inputData['title'] as String,
      inputData['body'] as String,
      inputData['payload'] as String,
    );
    return Future.value(true);
  });
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: firebaseOptions);
  await NotificationService.initialize();

  Workmanager().initialize(
    callbackDispatcher, // The top level function, aka callbackDispatcher
    isInDebugMode: true // if true, it will post a notification whenever the task is running. Handy for debugging tasks
  );

  Workmanager().registerPeriodicTask(
    "1",
    "checkRelays",
    frequency: Duration(minutes: 15),
    inputData: {
      'id': 1,
      'title': 'Relay Status Update',
      'body': 'Check the relay status update.',
      'payload': 'relay_update',
    },
  );

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => BluetoothProvider(),
      child: MaterialApp(
        title: 'HDD Monitor App',
        theme: ThemeData(
          primarySwatch: Colors.red,
          appBarTheme: AppBarTheme(
            color: Colors.red[800]!,
            foregroundColor: Colors.white,
          ),
          scaffoldBackgroundColor: Colors.white,
          textButtonTheme: TextButtonThemeData(
            style: TextButton.styleFrom(
              backgroundColor: Colors.redAccent,
              foregroundColor: Colors.white,
            ),
          ),
          elevatedButtonTheme: ElevatedButtonThemeData(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
          ),
          inputDecorationTheme: InputDecorationTheme(
            labelStyle: TextStyle(color: Colors.redAccent),
            hintStyle: TextStyle(color: Colors.redAccent),
            fillColor: Colors.white,
            filled: true,
            enabledBorder: UnderlineInputBorder(
              borderSide: BorderSide(color: Colors.redAccent),
            ),
            focusedBorder: UnderlineInputBorder(
              borderSide: BorderSide(color: Colors.red),
            ),
          ),
        ),
        home: AuthGuard(),
      ),
    );
  }
}



--- Contenido de auth_guard.dart ---

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flut_hdd_monitor/views/login_screen.dart';
import 'package:flut_hdd_monitor/views/dashboard_screen.dart';
import 'package:flut_hdd_monitor/services/auth_service.dart';

class AuthGuard extends StatelessWidget {
  final AuthService _authService = AuthService();

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Scaffold(
            body: Center(
              child: CircularProgressIndicator(),
            ),
          );
        }

        // Si el usuario está autenticado, redirigir al dashboard
        if (snapshot.hasData) {
          return DashboardScreen();
        } else {
          // Si el usuario no está autenticado, mostrar la pantalla de inicio de sesión
          return LoginScreen();
        }
      },
    );
  }
}



--- Contenido de auth_service.dart ---

import 'package:firebase_auth/firebase_auth.dart';

class AuthService {
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;

  Stream<User?> get authStateChanges => _firebaseAuth.authStateChanges();

  Future<void> signInWithEmailAndPassword(String email, String password) async {
    try {
      await _firebaseAuth.signInWithEmailAndPassword(email: email, password: password);
    } catch (e) {
      rethrow;
    }
  }

  Future<void> signOut() async {
    await _firebaseAuth.signOut();
  }

  Future<void> signUpWithEmailAndPassword(String email, String password) async {
    try {
      await _firebaseAuth.createUserWithEmailAndPassword(email: email, password: password);
    } catch (e) {
      rethrow;
    }
  }

  Future<void> resetPassword(String email) async {
    try {
      await _firebaseAuth.sendPasswordResetEmail(email: email);
    } catch (e) {
      rethrow;
    }
  }
}



--- Contenido de bluetooth_provider.dart ---

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_blue/flutter_blue.dart';
import 'package:collection/collection.dart';


class BluetoothProvider with ChangeNotifier {
  FlutterBlue _flutterBlue = FlutterBlue.instance;
  BluetoothDevice? _connectedDevice;
  List<BluetoothDevice> devicesList = [];

  BluetoothProvider() {
    _flutterBlue.state.listen((state) {
      if (state == BluetoothState.off) {
        // Manejar Bluetooth apagado
      } else if (state == BluetoothState.on) {
        startScan();
      }
      notifyListeners();
    });
  }

  void startScan() {
    _flutterBlue.startScan(timeout: Duration(seconds: 4));
    _flutterBlue.scanResults.listen((results) {
      for (ScanResult result in results) {
        if (!devicesList.contains(result.device)) {
          devicesList.add(result.device);
          notifyListeners();
        }
      }
    });
  }

  void connectToDevice(BluetoothDevice device) async {
    await device.connect();
    _connectedDevice = device;
    notifyListeners();
  }

  bool get isConnected => _connectedDevice != null;

  void sendWiFiCredentials(String ssid, String password) async {
    if (_connectedDevice != null) {
      List<BluetoothService> services = await _connectedDevice!.discoverServices();
      BluetoothService? targetService = services.firstWhereOrNull(
        (s) => s.uuid.toString() == "your-service-uuid", // Asegúrate de reemplazar esto por tu UUID
      );

      if (targetService != null) {
        BluetoothCharacteristic? ssidCharacteristic = targetService.characteristics.firstWhereOrNull(
          (c) => c.uuid.toString() == "your-ssid-characteristic-uuid", // Asegúrate de reemplazar esto por tu UUID
        );
        BluetoothCharacteristic? passwordCharacteristic = targetService.characteristics.firstWhereOrNull(
          (c) => c.uuid.toString() == "your-password-characteristic-uuid", // Asegúrate de reemplazar esto por tu UUID
        );

        if (ssidCharacteristic != null && passwordCharacteristic != null) {
          await ssidCharacteristic.write(utf8.encode(ssid), withoutResponse: true);
          await passwordCharacteristic.write(utf8.encode(password), withoutResponse: true);
          print("Credentials sent");
        } else {
          print("SSID or Password Characteristic not found");
        }
      } else {
        print("Target Service not found");
      }
    } else {
      print("No device connected");
    }
  }



  @override
  void dispose() {
    _flutterBlue.stopScan();
    super.dispose();
  }
}



--- Contenido de firebase_options.dart ---

import 'package:firebase_core/firebase_core.dart';

const FirebaseOptions firebaseOptions = FirebaseOptions(
  apiKey: 'AIzaSyA9356Ag5rbtyev5l7U_iE8dc9Rz6zTgbU',
  authDomain: 'fir-hdd-monitor-d00de.firebaseapp.com',
  projectId: 'fir-hdd-monitor-d00de',
  storageBucket: 'fir-hdd-monitor-d00de.appspot.com',
  messagingSenderId: '1002136032862',
  appId: '1:1002136032862:web:44e8c6751e458dca3dc6cf',
);


--- Contenido de firebase_service.dart ---

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';


class FirebaseService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<bool> hasPanelsForCurrentUser() async {
    try {
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId != null) {
        final querySnapshot = await _firestore
            .collection('hdd-monitor/accounts/clients/$userId/panels')
            .limit(1)
            .get();
        return querySnapshot.docs.isNotEmpty;
      }
      return false;
    } catch (e) {
      print('Error al verificar los paneles para el usuario actual: $e');
      throw e;
    }
  }

  Future<void> addPanel(String panelName) async {
    try {
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId != null) {
        await _firestore.collection('hdd-monitor/accounts/clients/$userId/panels').add({
          'name': panelName,
          'location': 'Ubicación predeterminada',
        });
      }
    } catch (e) {
      print('Error al agregar el panel a Firebase: $e');
      throw e;
    }
  }
}



--- Contenido de notification_service.dart ---

import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notificationsPlugin = FlutterLocalNotificationsPlugin();

  // Inicializa el servicio de notificaciones
  static Future<void> initialize() async {
    const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');
    final InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
    );

    await _notificationsPlugin.initialize(initializationSettings);
  }

  // Muestra una notificación
  static Future<void> showNotification(int id, String title, String body, String payload) async {
    const NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        'high_importance_channel', // ID del canal
        'High Importance Notifications', // Título del canal
        channelDescription: 'This channel is used for important notifications.', // Descripción del canal
        importance: Importance.max, // Importancia de la notificación
        priority: Priority.high, // Prioridad de la notificación
        playSound: true, // Activa el sonido
        visibility: NotificationVisibility.public, // Visibilidad de la notificación
        fullScreenIntent: true, // Notificación en pantalla completa
        enableVibration: true, // Activa la vibración
      )
    );

    await _notificationsPlugin.show(
      id, 
      title, 
      body, 
      notificationDetails, 
      payload: payload
    );
  }
}



--- Contenido de bluetooth_screen.dart ---

import 'package:flutter/material.dart';
import 'package:flutter_blue/flutter_blue.dart';
import 'package:provider/provider.dart';
import 'package:flut_hdd_monitor/services/bluetooth_provider.dart';

class BluetoothScreen extends StatefulWidget {
  @override
  _BluetoothScreenState createState() => _BluetoothScreenState();
}

class _BluetoothScreenState extends State<BluetoothScreen> {
  final TextEditingController ssidController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final bluetoothProvider = Provider.of<BluetoothProvider>(context);
    return Scaffold(
      appBar: AppBar(
        title: Text('Connect to ESP32 via BLE'),
      ),
      body: Column(
        children: <Widget>[
          Expanded(
            child: StreamBuilder<List<BluetoothDevice>>(
              stream: Stream.periodic(Duration(seconds: 2))
                  .asyncMap((_) => bluetoothProvider.devicesList),
              builder: (c, snapshot) {
                if (snapshot.hasData) {
                  return ListView(
                    children: snapshot.data!
                        .map((d) => ListTile(
                              title: Text(d.name),
                              subtitle: Text(d.id.toString()),
                              onTap: () => bluetoothProvider.connectToDevice(d),
                            ))
                        .toList(),
                  );
                } else {
                  return Center(child: CircularProgressIndicator());
                }
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: ssidController,
                  decoration: InputDecoration(
                    labelText: "SSID",
                  ),
                ),
                TextField(
                  controller: passwordController,
                  decoration: InputDecoration(
                    labelText: "Password",
                  ),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: () {
                    if (bluetoothProvider.isConnected) {
                      bluetoothProvider.sendWiFiCredentials(ssidController.text, passwordController.text);
                    } else {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text("No hay conexión BLE establecida."),
                          duration: Duration(seconds: 3),
                        ),
                      );
                    }
                  },
                  child: Text('Save WiFi Settings'),
                )
              ],
            ),
          ),
        ],
      ),
    );
  }
}



--- Contenido de dashboard_screen.dart ---

import 'package:flut_hdd_monitor/main.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flut_hdd_monitor/views/bluetooth_screen.dart';


class DashboardScreen extends StatelessWidget {
  const DashboardScreen({Key? key}) : super(key: key);

  void _logout(BuildContext context) async {
    await FirebaseAuth.instance.signOut();
    Navigator.of(context).pushReplacementNamed('/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dashboard', style: TextStyle(color: Colors.white, fontSize: 20)),
        backgroundColor: Colors.redAccent,
        actions: [
          IconButton(
            icon: const Icon(Icons.bluetooth),
            onPressed: () {
              Navigator.push(context, MaterialPageRoute(builder: (context) => BluetoothScreen()));
            },
            tooltip: 'Configurar Bluetooth',
          ),
          IconButton(
            icon: const Icon(Icons.exit_to_app),
            onPressed: () => _logout(context),
            tooltip: 'Logout',
          ),
        ],
      ),
      body: Container(
        color: Colors.white,
        child: SingleChildScrollView(
          child: Column(
            children: [
              _buildPanel(context),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPanel(BuildContext context) {
    return StreamBuilder<DocumentSnapshot>(
      stream: FirebaseFirestore.instance
          .doc('hdd-monitor/accounts/clients/client_1/panels/panel_1')
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.hasError) return Text('Error: ${snapshot.error}', style: TextStyle(color: Colors.black, fontSize: 16));
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Text('Cargando panel...', style: TextStyle(color: Colors.black, fontSize: 16));
        }
        if (!snapshot.hasData || !snapshot.data!.exists) {
          return const Text('Datos del panel no encontrados', style: TextStyle(color: Colors.black, fontSize: 16));
        }
        var panelData = snapshot.data!.data() as Map<String, dynamic>? ?? {};

        return Card(
          color: Colors.white,
          child: Column(
            children: [
              ListTile(
                leading: const Icon(Icons.dashboard, color: Colors.black),
                title: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(panelData['name'] ?? 'Panel Desconocido', style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold, fontSize: 18)),
                          Text('Ubicación: ${panelData['location']}', style: TextStyle(color: Colors.black, fontSize: 16)),
                        ],
                      ),
                    ),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _relayStatus(context, 'Alarma'),
                        _relayStatus(context, 'Problema'),
                        _relayStatus(context, 'Supervision'),
                      ],
                    ),
                  ],
                ),
              ),
              ExpansionTile(
                title: const Text('Detalles', style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold, fontSize: 14.5)),
                children: [_buildLastEvent(context)],
                iconColor: Colors.black,
                collapsedIconColor: Colors.black,
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _relayStatus(BuildContext context, String relayName) {
    return StreamBuilder<DocumentSnapshot>(
      stream: FirebaseFirestore.instance.doc('hdd-monitor/accounts/clients/client_1/panels/panel_1/relays/$relayName').snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator();
        }
        if (snapshot.hasData) {
          var data = snapshot.data!.data() as Map<String, dynamic>? ?? {};
          bool isOk = data['status'] == 'OK';
          // Trigger notification on status change
          if (!isOk) {
            NotificationService.showNotification(
              1, 
              'Alerta de Relay', 
              'El estado del relay $relayName ha cambiado a no OK!', 
              'relay_$relayName'
            );
          }
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2.0),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(isOk ? Icons.check_circle : Icons.remove_circle, color: isOk ? Colors.green : Colors.red, size: 24),
                const SizedBox(width: 8),
                Text(relayName, style: TextStyle(color: Colors.black, fontSize: 16)),
              ],
            ),
          );
        } else {
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2.0),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: const [
                Icon(Icons.error, color: Colors.red, size: 24),
                SizedBox(width: 8),
                Text('Error loading', style: TextStyle(color: Colors.black, fontSize: 16)),
              ],
            ),
          );
        }
      },
    );
  }

  Widget _buildLastEvent(BuildContext context) {
    return StreamBuilder<DocumentSnapshot>(
      stream: FirebaseFirestore.instance
          .doc('hdd-monitor/accounts/clients/client_1/panels/panel_1/panel_events/event_1')
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator();
        }
        if (snapshot.hasData) {
          var eventData = snapshot.data!.data() as Map<String, dynamic>? ?? {};
          return ListTile(
            title: Text('Último Evento: ${eventData['type'] ?? 'Desconocido'}', style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold, fontSize: 16)),
            subtitle: Text('Descripción: ${eventData['description']} - ${eventData['date_time']}', style: TextStyle(fontStyle: FontStyle.italic, color: Colors.black, fontSize: 15)),
          );
        } else {
          return const ListTile(
            title: Text('No hay eventos recientes', style: TextStyle(color: Colors.black, fontSize: 16)),
          );
        }
      },
    );
  }
}



--- Contenido de login_screen.dart ---

import 'package:flutter/material.dart';
import 'package:flut_hdd_monitor/services/auth_service.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({Key? key}) : super(key: key);

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final AuthService _authService = AuthService();

  void _login() async {
    try {
      await _authService.signInWithEmailAndPassword(
        _emailController.text.trim(),
        _passwordController.text.trim(),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error al iniciar sesión: ${e.toString()}')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Iniciar Sesión')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(labelText: 'Correo electrónico'),
            ),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'Contraseña'),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _login,
              child: const Text('Iniciar sesión'),
            ),
          ],
        ),
      ),
    );
  }
}


