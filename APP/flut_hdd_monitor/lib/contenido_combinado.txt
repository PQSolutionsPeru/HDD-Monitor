--- Contenido de main.dart ---

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flut_hdd_monitor/views/login_screen.dart';
import 'package:flut_hdd_monitor/views/dashboard_screen.dart';
import 'package:flut_hdd_monitor/views/add_bluetooth_panel_screen.dart';
import 'package:flut_hdd_monitor/services/firebase_options.dart';
import 'package:firebase_auth/firebase_auth.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: firebaseOptions);
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'HDD Monitor App',
      theme: ThemeData(
        primarySwatch: Colors.red,
        appBarTheme: AppBarTheme(
          color: Colors.red[800]!,
          foregroundColor: Colors.white,
        ),
        scaffoldBackgroundColor: Colors.white,
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(
            backgroundColor: Colors.redAccent,
            foregroundColor: Colors.white,
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.red,
            foregroundColor: Colors.white,
          ),
        ),
        inputDecorationTheme: InputDecorationTheme(
          labelStyle: TextStyle(color: Colors.redAccent),
          hintStyle: TextStyle(color: Colors.redAccent),
          fillColor: Colors.white,
          filled: true,
          enabledBorder: UnderlineInputBorder(
            borderSide: BorderSide(color: Colors.redAccent),
          ),
          focusedBorder: UnderlineInputBorder(
            borderSide: BorderSide(color: Colors.red),
          ),
        ),
      ),
      onGenerateRoute: (settings) {
        Widget page;
        switch (settings.name) {
          case '/':
            page = FirebaseAuth.instance.currentUser != null ? DashboardScreen() : LoginScreen();
            break;
          case '/dashboard':
            page = FirebaseAuth.instance.currentUser != null ? DashboardScreen() : LoginScreen();
            break;
          case '/add-bluetooth-panel':
            page = FirebaseAuth.instance.currentUser != null ? AddBluetoothPanelScreen() : LoginScreen();
            break;
          default:
            page = Scaffold(
              body: Center(child: Text('No se encontró la ruta')),
            );
        }
        return MaterialPageRoute(builder: (context) => page);
      },
    );
  }
}



--- Contenido de auth_service.dart ---

import 'package:firebase_auth/firebase_auth.dart';

class AuthService {
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;

  Stream<User?> get authStateChanges => _firebaseAuth.authStateChanges();

  Future<void> signInWithEmailAndPassword(String email, String password) async {
    try {
      await _firebaseAuth.signInWithEmailAndPassword(email: email, password: password);
    } catch (e) {
      rethrow;
    }
  }

  Future<void> signOut() async {
    await _firebaseAuth.signOut();
  }

  Future<void> signUpWithEmailAndPassword(String email, String password) async {
    try {
      await _firebaseAuth.createUserWithEmailAndPassword(email: email, password: password);
    } catch (e) {
      rethrow;
    }
  }

  Future<void> resetPassword(String email) async {
    try {
      await _firebaseAuth.sendPasswordResetEmail(email: email);
    } catch (e) {
      rethrow;
    }
  }
}



--- Contenido de bluetooth_service.dart ---

import 'package:flutter/material.dart';

class BluetoothService {
  void searchAndConfigurePanel() {
    // Aquí se implementará la lógica para buscar y configurar dispositivos Bluetooth
    // Por ahora, dejaremos esto como un placeholder
    print('Buscando y configurando dispositivo Bluetooth...');
  }
}


--- Contenido de firebase_options.dart ---

import 'package:firebase_core/firebase_core.dart';

const FirebaseOptions firebaseOptions = FirebaseOptions(
  apiKey: 'AIzaSyA9356Ag5rbtyev5l7U_iE8dc9Rz6zTgbU',
  authDomain: 'fir-hdd-monitor-d00de.firebaseapp.com',
  projectId: 'fir-hdd-monitor-d00de',
  storageBucket: 'fir-hdd-monitor-d00de.appspot.com',
  messagingSenderId: '1002136032862',
  appId: '1:1002136032862:web:44e8c6751e458dca3dc6cf',
);


--- Contenido de firebase_service.dart ---

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';


class FirebaseService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<bool> hasPanelsForCurrentUser() async {
    try {
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId != null) {
        final querySnapshot = await _firestore
            .collection('hdd-monitor/accounts/clients/$userId/panels')
            .limit(1)
            .get();
        return querySnapshot.docs.isNotEmpty;
      }
      return false;
    } catch (e) {
      print('Error al verificar los paneles para el usuario actual: $e');
      throw e;
    }
  }

  Future<void> addPanel(String panelName) async {
    try {
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId != null) {
        await _firestore.collection('hdd-monitor/accounts/clients/$userId/panels').add({
          'name': panelName,
          'location': 'Ubicación predeterminada',
        });
      }
    } catch (e) {
      print('Error al agregar el panel a Firebase: $e');
      throw e;
    }
  }
}



--- Contenido de add_bluetooth_panel_screen.dart ---

import 'package:flutter/material.dart';

class AddBluetoothPanelScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Agregar Panel por Bluetooth')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                // Lógica para agregar el panel por Bluetooth
                // Una vez agregado el panel, mostrar el cuadro de mensaje "Panel agregado"
                _showPanelAddedDialog(context);
              },
              child: Text('Agregar Panel'),
            ),
          ],
        ),
      ),
    );
  }

  void _showPanelAddedDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Panel Agregado'),
          content: Text('El panel se ha agregado correctamente.'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.pop(context); // Cerrar el diálogo
                Navigator.pushReplacementNamed(context, '/dashboard'); // Ir al Dashboard
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }
}



--- Contenido de dashboard_screen.dart ---

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class DashboardScreen extends StatelessWidget {
  const DashboardScreen({Key? key}) : super(key: key);

  void _logout(BuildContext context) async {
    await FirebaseAuth.instance.signOut();
    Navigator.of(context).pushReplacementNamed('/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dashboard', style: TextStyle(color: Colors.white, fontSize: 20)),
        backgroundColor: Colors.redAccent,
        actions: [
          IconButton(
            icon: const Icon(Icons.exit_to_app),
            onPressed: () => _logout(context),
            tooltip: 'Logout',
          ),
        ],
      ),
      body: Container(
        color: Colors.white,
        child: SingleChildScrollView(
          child: Column(
            children: [
              _buildPanel(context),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPanel(BuildContext context) {
    return StreamBuilder<DocumentSnapshot>(
      stream: FirebaseFirestore.instance
          .doc('hdd-monitor/accounts/clients/client_1/panels/panel_1')
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.hasError) return Text('Error: ${snapshot.error}', style: TextStyle(color: Colors.black, fontSize: 16));
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Text('Cargando panel...', style: TextStyle(color: Colors.black, fontSize: 16));
        }
        if (!snapshot.hasData || !snapshot.data!.exists) {
          return const Text('Datos del panel no encontrados', style: TextStyle(color: Colors.black, fontSize: 16));
        }
        var panelData = snapshot.data!.data() as Map<String, dynamic>? ?? {};

        return Card(
          color: Colors.white,
          child: Column(
            children: [
              ListTile(
                leading: const Icon(Icons.dashboard, color: Colors.black),
                title: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(panelData['name'] ?? 'Panel Desconocido', style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold, fontSize: 18)),
                          Text('Ubicación: ${panelData['location']}', style: TextStyle(color: Colors.black, fontSize: 16)),
                        ],
                      ),
                    ),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _relayStatus(context, 'Alarma'),
                        _relayStatus(context, 'Problema'),
                        _relayStatus(context, 'Supervision'),
                      ],
                    ),
                  ],
                ),
              ),
              ExpansionTile(
                title: const Text('Detalles', style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold, fontSize: 14.5)),
                children: [_buildLastEvent(context)],
                iconColor: Colors.black,
                collapsedIconColor: Colors.black,
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _relayStatus(BuildContext context, String relayName) {
    return StreamBuilder<DocumentSnapshot>(
      stream: FirebaseFirestore.instance
          .doc('hdd-monitor/accounts/clients/client_1/panels/panel_1/relays/$relayName')
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator();
        }
        if (snapshot.hasData) {
          var data = snapshot.data!.data() as Map<String, dynamic>? ?? {};
          bool isOk = data['status'] == 'OK';
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2.0),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(isOk ? Icons.check_circle : Icons.remove_circle, color: isOk ? Colors.green : Colors.red, size: 24),
                const SizedBox(width: 8),
                Text(relayName, style: TextStyle(color: Colors.black, fontSize: 16)),
              ],
            ),
          );
        } else {
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2.0),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: const [
                Icon(Icons.error, color: Colors.red, size: 24),
                SizedBox(width: 8),
                Text('Error loading', style: TextStyle(color: Colors.black, fontSize: 16)),
              ],
            ),
          );
        }
      },
    );
  }

  Widget _buildLastEvent(BuildContext context) {
    return StreamBuilder<DocumentSnapshot>(
      stream: FirebaseFirestore.instance
          .doc('hdd-monitor/accounts/clients/client_1/panels/panel_1/panel_events/event_1')
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator();
        }
        if (snapshot.hasData) {
          var eventData = snapshot.data!.data() as Map<String, dynamic>? ?? {};
          return ListTile(
            title: Text('Último Evento: ${eventData['type'] ?? 'Desconocido'}', style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold, fontSize: 16)),
            subtitle: Text('Descripción: ${eventData['description']} - ${eventData['date_time']}', style: TextStyle(fontStyle: FontStyle.italic, color: Colors.black, fontSize: 15)),
          );
        } else {
          return const ListTile(
            title: Text('No hay eventos recientes', style: TextStyle(color: Colors.black, fontSize: 16)),
          );
        }
      },
    );
  }
}



--- Contenido de login_screen.dart ---

import 'package:flutter/material.dart';
import 'package:flut_hdd_monitor/services/auth_service.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({Key? key}) : super(key: key);

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final AuthService _authService = AuthService();

  void _login() async {
    try {
      await _authService.signInWithEmailAndPassword(
        _emailController.text.trim(),
        _passwordController.text.trim(),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error al iniciar sesión: ${e.toString()}')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Iniciar Sesión')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(labelText: 'Correo electrónico'),
            ),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'Contraseña'),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _login,
              child: const Text('Iniciar sesión'),
            ),
          ],
        ),
      ),
    );
  }
}


